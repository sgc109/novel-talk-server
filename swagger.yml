openapi: "3.0.0"
info:
  title: "Swagger Novel Talk"
  description: ""
  version: "1.0.0"
servers:
  - url: http://localhost/api
    description: Local server
  - url: http://54.180.153.139/api
    description: Production server
    
tags:
- name: "auth"
  description: ""
- name: "user"
  description: ""
- name: "genre"
  description: ""
- name: "series"
  description: ""
- name: "story"
  description: ""
- name: "talk"
  description: "`Let's do it later!`"
- name: "comment"
  description: ""
- name: "report"
  description: ""
- name: "notification"
  description: ""
paths:
  /auth/login/{provider}:
    get:
      tags:
      - 'auth'
      summary: "signin"
      description: "description"
      parameters:
        - name: provider
          in: path
          description: 'oauth provider'
          required: true
          schema:
            type: string
            enum:
              - google
              - facebook
              - naver
              - kakao
            default: google
        - name: oauthData
          in: header
          description: 'oauth data'
          required: true
          schema:
            type: string
            example: "{ 'token': '123123', 'photoUrl': '', 'displayName': 'sungho' }"
      responses:
        200:
          description: OK
        401:
          description: Unauthorized
        500:
          description: 'Internal Server Error'
        504:
          description: 'Gateway Timeout'
  /auth/logout:
    get:
      tags:
      - 'auth'
      summary: "signout"
      description: "description"
      responses:
        400:
          description: ""
  /auth/register/{provider}:
    post:
      tags:
      - 'auth'
      summary: "create account"
      description: "description"
      parameters:
        - name: provider
          in: path
          description: 'oauth provider'
          required: true
          schema:
            type: string
            enum:
              - google
              - facebook
              - naver
              - kakao
            default: google
      responses:
        201:
          description: Created
        500:
          description: 'Internal Server Error'
  /auth/unregister:
    delete:
      tags:
      - 'auth'
      summary: "delete account"
      description: "description"
      responses:
        400:
          description: ""
  /users/{userId}:
    get:
      tags:
      - 'user'
      summary: 'get profile of this user'
      description: 'description'
      parameters:
      - name: userId
        in: 'path'
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: ""
  /users/{userId}/authorize:
    post:
      tags:
      - user
      summary: 'make this user official writer'
      description: 'description'
      parameters:
      - name: userId
        in: 'path'
        required: true
        schema:
          type: string
      responses:
        202:
          description: Accepted
        400:
          description: ""
  /users/{userId}/followers:
    get:
      tags:
      - user
      summary: 'get list of followers of this user'
      description: 'description'
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        400:
          description: ''
  /users/{userId}/follow:
    post:
      tags:
      - user
      summary: 'follow this user'
      description: 'description'
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        202:
          description: Accepted
        500:
          description: 'Internal Server Error'
  /users/{userId}/unfollow:
    delete:
      tags:
      - user
      summary: 'unfollow this user'
      description: 'description'
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        202:
          description: Accepted
        500:
          description: 'Internal Server Error'
  /genres:
    get:
      tags:
      - 'genre'
      summary: 'get list of all genres (done~)'
      description: 'description'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Genre"
        400:
          description: ""
    post:
      tags:
      - 'genre'
      summary: 'create a genre (done~)'
      description: 'description'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                coverImage:
                  type: string
                  format: binary
              required:
                - title
                - coverImage
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"
        400:
          description: ""
  /genres/{genreId}:
    put:
      tags:
      - 'genre'
      summary: 'modify this genre (done~)'
      description: 'description'
      parameters:
      - name: genreId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                coverImage:
                  type: string
                  format: binary
              required:
                - title
                - coverImage
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Genre"
        400:
          description: ""
    delete:
      tags:
      - 'genre'
      summary: 'delete this genre (done~)'
      description: 'description'
      parameters:
      - name: genreId
        in: path
        required: true
        schema:
            type: string
      responses:
        200:
          description: OK
        400:
          description: ""
  /genres/{genreId}/series:
    get:
      tags:
      - 'genre'
      summary: 'get list of series in this genre'
      description: 'description'
      parameters:
      - name: genreId
        in: path
        required: true
        schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Series"
        400:
          description: ""
  /series:
    get:
      tags:
      - 'series'
      summary: 'get list of series'
      description: 'sorted by `lastWrittenAt` by default'
      parameters:
      - name: keyword
        in: 'query'
        required: true
        schema:
            type: string
      - name: cnt
        in: query
        required: true
        schema:
            type: number
      - name: lastId
        in: query
        required: true
        schema:
            type: number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Series"
        400:
          description: ""
    post:
      tags:
      - 'series'
      summary: 'create a series (done~)'
      description: 'description'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Series"
        400:
          description: ""
  /series/{seriesId}:
    parameters:
    - name: "seriesId"
      in: "path"
      description: "description"
      required: true
      schema:
            type: "string"
    get:
      tags:
      - 'series'
      summary: 'get information of this series (done~)'
      description: 'description'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Series"
        400:
          description: ""
    delete:
      tags:
      - 'series'
      summary: 'remove this series (done~)'
      description: 'description'
      responses:
        202:
          description: Accepted
        400:
          description: ""
  /series/{seriesId}/stories:
    get:
      tags:
      - 'series'
      summary: 'get list of stories in this series (done~)'
      description: 'description'
      parameters:
      - name: "seriesId"
        in: "path"
        description: "description"
        required: true
        schema:
            type: "string"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Story"
        400:
          description: ""
    post:
      tags:
      - 'story'
      summary: 'write a story in this series'
      description: 'description'
      parameters:
        - name: 'seriesId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                coverImage:
                  type: string
                  format: binary
              required:
                - title
                - coverImage
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Story'
        400:
          description: ''
  /user/{userId}/series:
    get:
      tags:
      - series
      summary: 'get list of series written by this user'
      description: 'description'
      parameters:
        - name: 'userId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
        - name: sortBy
          in: query
          description: "description"
          required: true
          schema:
            type: string
            enum:
            - dictionary
            - cntComment
            - writtenAt
            - score
            default: writtenAt
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Series"
        400:
          description: ''
  /stories/{storyId}:
    patch:
      tags:
      - 'story'
      summary: 'update story title'
      description: 'description'
      parameters:
        - name: 'storyId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  type: string
              required:
                - title
      responses:
        200:
          description: OK
        400:
          description: ""
    delete:
      tags:
      - 'story'
      summary: 'remove this story'
      description: 'description'
      parameters:
        - name: 'storyId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      responses:
        202:
          description: accpeted
        400:
          description: ""
  /stories/{storyId}/evaluate:
    post:
      tags:
      - 'story'
      summary: 'give a score about this story'
      description: 'description'
      parameters:
        - name: 'storyId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                score:
                  type: string
              required:
                - score
      responses:
        400:
          description: ''
  /stories/{storyId}/talks:
    get:
      tags:
      - 'talk'
      summary: 'get talks in story'
      description: 'description'
      parameters:
        - name: 'storyId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
        - name: 'offset'
          in: 'query'
          description: ''
          required: true
          schema:
            type: string
        - name: 'cnt'
          in: 'query'
          description: ''
          required: true
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Talk'
        400:
          description: ""
    post:
      tags:
      - 'talk'
      summary: 'create talk in story'
      description: 'description'
      parameters:
      - name: 'storyId'
        in: 'path'
        description: ''
        required: true
        schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded::
            schema:
              type: object
              properties:
                content:
                  type: string
                who:
                  type: string
                action:
                  type: string
              required:
                - content
                - who
                - action
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Talk'
        400:
          description: ""
  /stories/{storyId}/talks/{talkId}:
    delete:
      tags:
      - 'talk'
      summary: ''
      description: ''
      parameters:
        - name: 'storyId'
          in: 'path'
          required: true
          schema:
            type: string
        - name: 'talkId'
          in: 'path'
          required: true
          schema:
            type: string
      responses:
        202:
          description: OK
  /stories/{storyId}/comments:
    get:
      tags:
      - 'comment'
      summary: 'get comments in story'
      description: 'description'
      parameters:
        - name: 'storyId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
        - name: 'lastItemId'
          in: 'query'
          description: ''
          required: true
          schema:
            type: string
        - name: 'cnt'
          in: 'query'
          description: ''
          required: true
          schema:
            type: number
        - name: 'sortBy'
          in: 'query'
          description: ''
          required: true
          schema:
            type: "string"
            enum:
            - "cntLike"
            - "writtenAt"
            default: "writtenAt"
      responses:
        202:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        400:
          description: ""
    post:
      tags:
      - 'comment'
      summary: 'write comment in story'
      description: 'description'
      parameters:
        - name: 'storyId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                content:
                  description: ''
                  type: string
              required:
                - content
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Talk'
        400:
          description: ""
  /comments/{commentId}:
    delete:
      tags:
      - 'comment'
      summary: 'remove this comment'
      description: 'description'
      parameters:
        - name: 'commentId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      responses:
        202:
          description: OK
        400:
          description: ""
  /comments/{commentId}/hide:
    patch:
      tags:
      - 'comment'
      summary: 'hide this comment'
      description: 'description'
      parameters:
        - name: 'commentId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      responses:
        202:
          description: Accepted
        400:
          description: ""
        500:
          description: Error
  /comments/{commentId}/unhide:
    patch:
      tags:
      - 'comment'
      summary: 'reveal this comment'
      description: 'description'
      parameters:
        - name: 'commentId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      responses:
        202:
          description: Accepted
        400:
          description: ""
        500:
          description: Error
  
  /comments/{commentId}/like:
    patch:
      tags:
      - 'comment'
      summary: 'like this comment'
      description: 'description'
      parameters:
        - name: 'commentId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      responses:
        202:
          description: Accepted
        400:
          description: ""
        500:
          description: Error
  /comments/{commentId}/unlike:
    patch:
      tags:
      - 'comment'
      summary: 'unlike this comment'
      description: 'description'
      parameters:
        - name: 'commentId'
          in: 'path'
          description: ''
          required: true
          schema:
            type: string
      responses:
        202:
          description: Accepted
        400:
          description: ""
        500:
          description: Error
  /reports:
    get:
      tags:
      - report
      summary: 'get list of reports'
      description: 'description'
      parameters:
      - name: startDate
        in: query
        required: true
        schema:
          type: string
      - name: endDate
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Report'
        400:
          description: ""
components:
  schemas:
    User:
      required:
        - _id
        - nickname
        - isOfficial
        - provider
        - oauthId
      type: object
      properties:
        _id:
          type: string
        provider:
          type: string
          enum:
            - google
            - facebook
            - kakao
            - naver
        oauthId:
          type: string
        nickname:
          type: string
          example: sungho
        isOfficial:
          type: boolean
          default: false
          example: false
        cntCommentsReceived:
          type: integer
          default: 0
          example: 10
        profileImage:
          type: object
          properties:
            data:
              type: string
            contentType:
              type: string
    Genre:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
          example: Romance
        description:
          type: string
          example: Love story
        coverImage:
          type: object
          properties:
            data:
              type: string
            contentType:
              type: string
    Series:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
          example: Harry Potter
        authorId:
          type: string
          example: 5d4195f5697dc220d07efdde
        coverImage:
          type: object
          properties:
            data:
              type: string
            contentType:
              type: string
        genreId:
          type: array
          items:
            type: integer
        cntStories:
            type: integer
            example: 1
        sumScore:
          type: number
          example: 47.5
        cntEval:
          type: integer
          example: 10
        lastWrittenAt:
          type: string
          format: date:time
          default: '1970-01-01:00:00:00'
    Story:
      type: object
      properties:
        _id:
          type: string
        seriesId:
          type: string
        authorId:
          type: string
        storyNo:
          type: integer
          example: 1
        title:
          type: string
          example: the Chamber of Secrets
        createdAt:
          type: string
          format: date-time
        cntComment:
          type: integer
        cntView:
          type: integer
        sumScore:
          type: number
          example: 47.5
        cntEval:
          type: integer
          example: 10
    Talk:
      type: object
      properties:
        _id:
          type: string
        type:
          type: string
          enum:
            - image
            - text
        index:
          type: integer
        text:
          type: string
        image:
          type: object
          properties:
            data:
              type: string
            contentType:
              type: string
        action:
          type: object
    Comment:
      type: object
      properties:
        _id:
          type: string
        storyId:
          type: string
        writerId:
          type: string
        isHidden:
          type: boolean
        createAt:
          type: string
          format: date-time
        cntLike:
          type: integer
    Follow:
      type: object
      properties:
        _id:
          type: string
    Report:
      type: object
      properties:
        _id:
          type: string
    Badge:
      type: object
      properties:
        _id:
          type: string
    Notification:
      type: object
      properties:
        _id:
          type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
